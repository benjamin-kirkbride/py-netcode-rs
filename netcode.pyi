from typing import TypeAlias

def sum_as_string(a: int, b: int) -> str: ...
def generate_key() -> bytes: ...

Address: TypeAlias = tuple[str, int]

CONNECT_TOKEN_BYTES: int
MAX_PACKET_SIZE: int
NETCODE_VERSION: bytes
PRIVATE_KEY_BYTES: int
USER_DATA_BYTES: int

class Server:
    # TODO: get actual arg names
    def __init__(
        self, listen_address: Address, protocol_id: int, private_key: bytes
    ) -> None: ...
    def recv(self) -> bytes: ...

class ConnectToken:
    def __init__(  # noqa: PLR0913
        self,
        server_addresses: list[Address],
        protocol_id: int,
        client_id: int,
        private_key: bytes,
        expire_seconds: int | None = None,
        timeout_seconds: int | None = None,
    ) -> None: ...
    def __bytes__(self) -> bytes: ...

class Client:
    def __init__(
        self,
        token: ConnectToken,
    ) -> None: ...
    def connect(self) -> None: ...
    def update(self, time: float) -> None: ...
    def recv(self) -> bytes | None: ...
    def send(self, data: bytes) -> None: ...
    def disconnect(self) -> None: ...
    def address(self) -> Address: ...
    def addr(self) -> Address: ...
    def is_error(self) -> bool: ...
    def is_pending(self) -> bool: ...
    def is_connected(self) -> bool: ...
    def is_disconnected(self) -> bool: ...
