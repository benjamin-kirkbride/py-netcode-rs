from typing import TypeAlias

from .client_state import ClientState

Address: TypeAlias = tuple[str, int]
ClientID: TypeAlias = int

def generate_key() -> bytes: ...

CONNECT_TOKEN_BYTES: int
MAX_PACKET_SIZE: int
NETCODE_VERSION: bytes
PRIVATE_KEY_BYTES: int
USER_DATA_BYTES: int

class ClientIndex: ...

class Server:
    clients: list[ClientIndex]
    def __init__(
        self, bind_addr: Address, protocol_id: int, private_key: bytes
    ) -> None: ...
    def update(self, time: float) -> None: ...
    def recv(self) -> tuple[bytes, ClientIndex] | None: ...
    def send(self, data: bytes, client_index: ClientIndex) -> None: ...
    def send_all(self, data: bytes) -> None: ...
    def token(self, client_id: int) -> ConnectToken: ...
    def disconnect(self, client_index: ClientIndex) -> None: ...
    def disconnect_all(self) -> None: ...
    def address(self) -> Address: ...
    def addr(self) -> Address: ...
    def num_connected_clients(self) -> int: ...
    def client_id(self, client_index: ClientIndex) -> ClientID: ...
    def client_address(self, client_index: ClientIndex) -> Address: ...
    def client_addr(self, client_index: ClientIndex) -> Address: ...
    def client_state(self, client_index: ClientIndex) -> ClientState: ...

class ConnectToken:
    def __init__(  # noqa: PLR0913
        self,
        server_addresses: list[Address],
        protocol_id: int,
        client_id: int,
        private_key: bytes,
        expire_seconds: int | None = None,
        timeout_seconds: int | None = None,
    ) -> None: ...
    def __bytes__(self) -> bytes: ...

class Client:
    client_id: ClientID
    def __init__(self, token: ConnectToken) -> None: ...
    def connect(self) -> None: ...
    def update(self, time: float) -> None: ...
    def recv(self) -> bytes | None: ...
    def send(self, data: bytes) -> None: ...
    def disconnect(self) -> None: ...
    def address(self) -> Address: ...
    def addr(self) -> Address: ...
    def state(self) -> ClientState: ...
    def is_error(self) -> bool: ...
    def is_pending(self) -> bool: ...
    def is_connected(self) -> bool: ...
    def is_disconnected(self) -> bool: ...
